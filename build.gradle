buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.shadew.net/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'net.shadew', name: 'modutil', version: '1.0-beta.10'
    }
}

ext {
    timeOfExecution = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'net.shadew.modutil'

apply plugin: 'eclipse'
apply plugin: 'signing'

String getVariable(String key) {
    return rootProject.hasProperty(key) ? rootProject.property(key) : null
}

def mc_version = "${mc_version_major}.${mc_version_minor}.${mc_version_patch}"
def forge_version = project.hasProperty('forge_version_build') ? "${forge_version_major}.${forge_version_minor}.${forge_version_patch}.${forge_version_build}" : "${forge_version_major}.${forge_version_minor}.${forge_version_patch}"

version = project.hasProperty('mod_version_modifier') ? "${mod_version_major}.${mod_version_minor}.${mod_version_patch}-${mod_version_modifier}" : "${mod_version_major}.${mod_version_minor}.${mod_version_patch}"
group = "me.jonathing.minecraft.${mod_id}"
archivesBaseName = "${mod_id}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

project.ext.canJarBeSigned = { return canJarBeSigned() }
project.ext.getProjectFingerprint = { return getProjectFingerprint() }
project.ext.sign = { File jar -> return sign(jar) }
project.ext.isOsx = { return isOsx() }

println('')
println('Java Information')
println('- Java: ' + System.getProperty('java.version'))
println('- JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('- Arch: ' + System.getProperty('os.arch'))
println('')
println('Minecraft Information')
println('- Minecraft: ' + "${mc_version}".toString())
println('- Minecraft Forge: ' + "${forge_version}".toString())
println('- Mappings: ' + "${mappings_version} ${mappings_channel}".toString())
println('')
println('Mod Information')
println('- ID: ' + "${mod_id}".toString())
println('- Name: ' + "${mod_name}".toString())
println('- Version: ' + "${version}".toString())
println('')

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "Shadew's Maven Repo"
        url = "https://maven.shadew.net/"
    }
    maven {
        name = "tterrag's Maven Repo"
        url = "https://maven.tterrag.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl/"
    }
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

modutil {
    changelogJson file('changelog.json')
    markdownChangelog file('versioninfo/latest_changelog.md')
    markdownChangelog file("versioninfo/${changelogInfo.versionNumber}_changelog.md")
    updateJson file('versioninfo/update.json')

    constant('mod_id', mod_id)
    constant('mod_name', mod_name)
    constant('version', changelogInfo.versionNumber)
    constant('version_name', changelogInfo.versionName)
    constant('group', project.group)
    constant('build_time', project.ext.timeOfExecution)
    constant('expected_sha256', getProjectFingerprint())

    constantAnnotation 'me.jonathing.minecraft.ci_testserver.info.DynamicConstant'
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${mappings_channel}".toString(), version: "${mappings_version}".toString()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run/client')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Tell Minecraft if it is running in an IDE
            property "${mod_id}.iside".toString(), 'true'

            mods {
                foragecraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Tell Minecraft if it is running in an IDE
            property "${mod_id}.iside".toString(), 'true'

            args 'nogui'

            mods {
                foragecraft {
                    source sourceSets.main
                }
            }
        }

        testServer {
            // Get all the shit from the server config
            parent minecraft.runs.server

            // Tell Minecraft that we are only running a test server for the CI
            property 'minecraftdev.ci.istestserver', 'true'
        }

        data {
            workingDirectory project.file('run/data')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Tell Minecraft if it is running in an IDE
            property "${mod_id}.iside".toString(), 'true'

            // Tell Minecraft if it is running datagen
            property "${mod_id}.datagen".toString(), 'true'

            // Workaround for https://github.com/MinecraftForge/ForgeGradle/issues/690
            // Written by Shadew
            if (project.ext.isOsx()) {
                jvmArg("-XstartOnFirstThread")
            }

            args '--mod', "${mod_id}".toString(), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                foragecraft {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources'
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}".toString()

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

build {
    dependsOn 'signJar'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "ForageCraft",
                "Specification-Vendor"    : "Jonathing",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Jonathing",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def canJarBeSigned() {
    return getVariable('jcKeyStore') != null
}

// Returns the public fingerprint, may be empty ("")
def getProjectFingerprint() {
    if (canJarBeSigned()) {
        def sha256 = getVariable('jcKeyStoreSHA256')
        return sha256 != null ? sha256 : ''
    }
}

// Signs a jar file
def sign(File jar) {
    if (canJarBeSigned()) {
        println "Attempting to sign jar: ${jar}"
        ant.signjar(
                destDir: "${jar.parentFile}",
                jar: "${jar}",
                alias: getVariable('jcKeyStoreAlias'),
                storetype: "jks",
                keystore: getVariable("jcKeyStore"),
                storepass: getVariable('jcKeyStorePass'),
                keypass: getVariable('jcKeyStoreKeyPass'),
                verbose: true,
                preservelastmodified: "true"
        )
        println "Jar signed: ${jar}"
    } else {
        println "No keystore property found, jar will not be signed"
    }
}

static def isOsx() {
    def osProp = System.properties['os.name'].toLowerCase()
    return osProp.contains('darwin') || osProp.contains('osx') || osProp.contains('mac')
}

task signJar(dependsOn: 'reobfJar') {
    doLast {
        project.ext.sign(jar.archivePath)
    }
}
