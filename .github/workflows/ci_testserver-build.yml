# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: CI Plugin (1.16.4)

on:
  push:
    branches:
      - 1.16.4
    paths-ignore:
      - '.github/**'
      - 'versioninfo/**'
      - 'README.md'
      - 'LICENSE'
      - 'changelog.json'
      - '.gitignore'
      - '.gitattributes'
    tags-ignore:
      - '*.*'
  schedule:
    - cron: '0 12 * * 2,6'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Update CI Workspace
      uses: actions/checkout@v1

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        java-package: jdk
        architecture: x64

    - name: Retrieve any cached dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build the CI Test Server Plugin
      uses: eskatos/gradle-command-action@v1
      with:
        gradle-version: 4.10.3
        arguments: build --no-daemon --warning-mode none

    - name: Prepare to upload the build outputs
      run: |
        echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV
        echo "Ready to upload the build output to GitHub."

    - name: Upload The Midnight to GitHub
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: ci_testserver-${{ env.SHORT_SHA }}
        # A file, directory or wildcard pattern that describes what to upload
        path: build/libs/*.jar

  testWindows:
    name: Server Test (Windows Server)
    runs-on: windows-latest

    steps:
      - name: Update CI workspace
        uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          java-package: jdk
          architecture: x64

      - name: Prepare to test a Minecraft Server with The Midnight
        shell: pwsh
        run: |
          Write-Host "Generating the Minecraft Server's runtime environment..."
          New-Item run/server -ItemType Directory -ea 0
          "eula=true" | Out-File run/server/eula.txt
          "TEST FAILED" | Out-File run/server/TESTSERVER.txt
          Write-Host "Ready to test the Minecraft Server."

      - name: Retrieve any cached dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-serverTest-windows-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-serverTest-windows-

      - name: Run test server
        uses: eskatos/gradle-command-action@v1
        continue-on-error: true
        with:
          gradle-version: 4.10.3
          arguments: runTestServer --max-workers 1 -x downloadAssets

      - name: Read server test result
        id: log
        uses: andstor/file-reader-action@v1
        with:
          path: run/server/TESTSERVER.txt

      - name: Determine if server test was unsuccessful
        if: !contains(steps.log.outputs.contents, 'TEST SUCCESS')
        shell: pwsh
        run: |
          Write-Host "GitHub Actions was unable to successfully load the test server into a temporary world. Check the log in the `"Run test server`" step to see what went wrong."
          exit 1

  testMacOS:
    name: Server Test (macOS)
    runs-on: macos-latest

    steps:
      - name: Update CI workspace
        uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          java-package: jdk
          architecture: x64

      - name: Prepare to test a Minecraft Server with The Midnight
        run: |
          echo "Generating the Minecraft Server's runtime environment..."
          mkdir run/server
          echo "eula=true" >> run/server/eula.txt
          echo "TEST FAILED" >> run/server/TESTSERVER.txt
          echo "Ready to test the Minecraft Server."

      - name: Retrieve any cached dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-serverTest-macos-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-serverTest-macos-

      - name: Run test server
        uses: eskatos/gradle-command-action@v1
        continue-on-error: true
        with:
          gradle-version: 4.10.3
          arguments: runTestServer --max-workers 1 -x downloadAssets

      - name: Read server test result
        id: log
        uses: andstor/file-reader-action@v1
        with:
          path: run/server/TESTSERVER.txt

      - name: Determine if server test was unsuccessful
        if: !contains(steps.log.outputs.contents, 'TEST SUCCESS')
        run: |
          echo "GitHub Actions was unable to successfully load the test server into a temporary world. Check the log in the \"Run test server\" step to see what went wrong."
          exit 1

  testLinux:
    name: Server Test (Ubuntu)
    runs-on: ubuntu-latest

    steps:
      - name: Update CI workspace
        uses: actions/checkout@v1

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          java-package: jdk
          architecture: x64

      - name: Prepare to test a Minecraft Server with The Midnight
        run: |
          echo "Generating the Minecraft Server's runtime environment..."
          mkdir run/server
          echo "eula=true" >> run/server/eula.txt
          echo "TEST FAILED" >> run/server/TESTSERVER.txt
          echo "Ready to test the Minecraft Server."

      - name: Retrieve any cached dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-serverTest-ubuntu-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-serverTest-ubuntu-

      - name: Run test server
        uses: eskatos/gradle-command-action@v1
        continue-on-error: true
        with:
          gradle-version: 4.10.3
          arguments: runTestServer --max-workers 1 -x downloadAssets

      - name: Read server test result
        id: log
        uses: andstor/file-reader-action@v1
        with:
          path: run/server/TESTSERVER.txt

      - name: Determine if server test was unsuccessful
        if: !contains(steps.log.outputs.contents, 'TEST SUCCESS')
        run: |
          echo "GitHub Actions was unable to successfully load the test server into a temporary world. Check the log in the \"Run test server\" step to see what went wrong."
          exit 1
